case opton__katanor__1997__8mm:
{
const double dx00 =  + 0.212004  + 0.12976 *lens_ipow(dy, 2) + 0.929414 *lens_ipow(dx, 2) + -0.00133904 *lens_ipow(y, 2) + -0.00325528 *lens_ipow(x, 2) + 0.00699149 *y*dy*lambda + 0.0401441 *x*dx*lambda + 0.488131 *lens_ipow(dx, 4) + 0.0596615 *x*lens_ipow(dx, 3) + -4.78827e-05 *lens_ipow(x, 4) + -0.000940566 *x*lens_ipow(y, 2)*dx*lambda + -0.00161453 *lens_ipow(x, 3)*dx*lambda + 2.21024e-05 *lens_ipow(x, 4)*lambda + 0.000115456 *lens_ipow(y, 4)*lens_ipow(dy, 2)*lambda + -2.36773e-05 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy*lambda + -1.98967e-05 *lens_ipow(x, 4)*y*dy*lambda + -9.32789e-08 *lens_ipow(x, 4)*lens_ipow(y, 4) + -3.12644e-11 *lens_ipow(y, 10)+0.0f;
const double dx01 =  + 0.833112 *dx*dy + -0.00267808 *x*y + 0.0187637 *y*dx*lambda + 0.00699149 *x*dy*lambda + -0.000940566 *lens_ipow(x, 2)*y*dx*lambda + 0.000461824 *x*lens_ipow(y, 3)*lens_ipow(dy, 2)*lambda + -2.36773e-05 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy*lambda + -3.97933e-06 *lens_ipow(x, 5)*dy*lambda + -2.2738e-05 *lens_ipow(y, 5)*dx*lens_ipow(lambda, 2) + -7.46231e-08 *lens_ipow(x, 5)*lens_ipow(y, 3) + -3.12644e-10 *x*lens_ipow(y, 9)+0.0f;
const double dx02 =  + 18.7155  + 1.63457 *lens_ipow(dy, 2) + 4.12645 *lens_ipow(dx, 2) + 0.833112 *y*dy + 1.85883 *x*dx + 0.00938185 *lens_ipow(y, 2)*lambda + 0.0200721 *lens_ipow(x, 2)*lambda + 5.32923 *lens_ipow(dy, 4) + 33.0955 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 39.7735 *lens_ipow(dx, 4) + 1.95252 *x*lens_ipow(dx, 3) + 0.0894923 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -2.24232 *lens_ipow(dx, 2)*lens_ipow(lambda, 3) + -0.000470283 *lens_ipow(x, 2)*lens_ipow(y, 2)*lambda + -0.000403633 *lens_ipow(x, 4)*lambda + -3.78966e-06 *lens_ipow(y, 6)*lens_ipow(lambda, 2)+0.0f;
const double dx03 =  + 3.26914 *dx*dy + 0.833112 *y*dx + 0.259521 *x*dy + 0.00699149 *x*y*lambda + 21.3169 *dx*lens_ipow(dy, 3) + 22.0637 *lens_ipow(dx, 3)*dy + 0.000230912 *x*lens_ipow(y, 4)*dy*lambda + -7.89244e-06 *lens_ipow(x, 3)*lens_ipow(y, 3)*lambda + -3.97933e-06 *lens_ipow(x, 5)*y*lambda+0.0f;
const double dx04 =  + 0.00938185 *lens_ipow(y, 2)*dx + 0.00699149 *x*y*dy + 0.0200721 *lens_ipow(x, 2)*dx + -2.24232 *lens_ipow(dx, 3)*lens_ipow(lambda, 2) + -0.000470283 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx + -0.000403633 *lens_ipow(x, 4)*dx + 4.42048e-06 *lens_ipow(x, 5) + 0.000115456 *x*lens_ipow(y, 4)*lens_ipow(dy, 2) + -7.89244e-06 *lens_ipow(x, 3)*lens_ipow(y, 3)*dy + -3.97933e-06 *lens_ipow(x, 5)*y*dy + -7.57933e-06 *lens_ipow(y, 6)*dx*lambda+0.0f;
const double dx10 =  + 0.86662 *dx*dy + -0.0020536 *x*y + 0.00705968 *y*dx*lambda + 0.0204267 *x*dy*lambda + -0.0017076 *lens_ipow(y, 2)*dx*dy + -2.85539e-05 *x*lens_ipow(y, 3) + -0.00507695 *lens_ipow(x, 2)*dx*dy + -3.12809e-05 *lens_ipow(x, 3)*y + -0.000575528 *lens_ipow(x, 3)*dy*lambda + -5.71296e-05 *x*lens_ipow(y, 4)*dy*lambda + -4.79705e-05 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx*lambda + -5.68608e-08 *lens_ipow(y, 7)*dx + -1.02219e-05 *x*lens_ipow(y, 5)*lens_ipow(dy, 2)+0.0f;
const double dx11 =  + 0.21049  + 0.969774 *lens_ipow(dy, 2) + 0.132787 *lens_ipow(dx, 2) + -0.00307302 *lens_ipow(y, 2) + -0.0010268 *lens_ipow(x, 2) + 0.0299736 *y*dy*lambda + 0.00705968 *x*dx*lambda + -5.24177e-05 *lens_ipow(y, 4) + -0.00341521 *x*y*dx*dy + -4.28309e-05 *lens_ipow(x, 2)*lens_ipow(y, 2) + -7.82022e-06 *lens_ipow(x, 4) + 2.65731e-05 *lens_ipow(y, 4)*lambda + -0.000114259 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy*lambda + -4.79705e-05 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*lambda + -3.98026e-07 *x*lens_ipow(y, 6)*dx + -2.55547e-05 *lens_ipow(x, 2)*lens_ipow(y, 4)*lens_ipow(dy, 2) + -1.06634e-06 *lens_ipow(y, 7)*dy*lambda+0.0f;
const double dx12 =  + 3.06797 *dx*dy + 0.265575 *y*dx + 0.86662 *x*dy + 0.00705968 *x*y*lambda + 23.5116 *dx*lens_ipow(dy, 3) + 24.0836 *lens_ipow(dx, 3)*dy + -0.0017076 *x*lens_ipow(y, 2)*dy + -0.00169232 *lens_ipow(x, 3)*dy + -1.59902e-05 *lens_ipow(x, 3)*lens_ipow(y, 3)*lambda + -5.68608e-08 *x*lens_ipow(y, 7)+0.0f;
const double dx13 =  + 18.7159  + 5.11838 *lens_ipow(dy, 2) + 1.53398 *lens_ipow(dx, 2) + 1.93955 *y*dy + 0.86662 *x*dx + 0.0149868 *lens_ipow(y, 2)*lambda + 0.0102134 *lens_ipow(x, 2)*lambda + 28.7067 *lens_ipow(dy, 4) + 35.2674 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 6.0209 *lens_ipow(dx, 4) + -0.0017076 *x*lens_ipow(y, 2)*dx + -0.00169232 *lens_ipow(x, 3)*dx + -2.3317 *lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -0.000143882 *lens_ipow(x, 4)*lambda + -2.85648e-05 *lens_ipow(x, 2)*lens_ipow(y, 4)*lambda + -1.02219e-05 *lens_ipow(x, 2)*lens_ipow(y, 5)*dy + -1.33292e-07 *lens_ipow(y, 8)*lambda+0.0f;
const double dx14 =  + 0.0149868 *lens_ipow(y, 2)*dy + 0.00705968 *x*y*dx + 0.0102134 *lens_ipow(x, 2)*dy + -2.3317 *lens_ipow(dy, 3)*lens_ipow(lambda, 2) + 5.31462e-06 *lens_ipow(y, 5) + -0.000143882 *lens_ipow(x, 4)*dy + -2.85648e-05 *lens_ipow(x, 2)*lens_ipow(y, 4)*dy + -1.59902e-05 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx + -1.33292e-07 *lens_ipow(y, 8)*dy+0.0f;
const double dx20 =  + -0.0549401  + 0.0250647 *lens_ipow(dy, 2) + 0.0810692 *lens_ipow(dx, 2) + 0.00267795 *y*dy + -3.79402e-05 *lens_ipow(y, 2) + 0.00583608 *x*dx + -0.000123136 *lens_ipow(x, 2) + -0.0238049 *lens_ipow(dx, 2)*lambda + -0.00213414 *y*lens_ipow(dy, 3) + -5.56901e-07 *lens_ipow(y, 4) + 0.000390047 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -3.07548e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + -2.69652e-06 *lens_ipow(x, 4) + 0.000327691 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lambda + 6.37453e-05 *lens_ipow(x, 4)*lens_ipow(dx, 2)*lambda+0.0f;
const double dx21 =  + 0.0438188 *dx*dy + 0.000590201 *y*dx + 0.00267795 *x*dy + -7.58803e-05 *x*y + -0.00213414 *x*lens_ipow(dy, 3) + -2.2276e-06 *x*lens_ipow(y, 3) + -2.05032e-06 *lens_ipow(x, 3)*y + 0.000655382 *x*y*lens_ipow(dx, 2)*lambda + -0.984223 *lens_ipow(dx, 3)*lens_ipow(dy, 3)*lens_ipow(lambda, 2)+0.0f;
const double dx22 =  + -0.455033 *lambda + 0.452515 *lens_ipow(lambda, 2) + -0.397809 *lens_ipow(dy, 2) + 0.0438188 *y*dy + 0.000295101 *lens_ipow(y, 2) + 0.162138 *x*dx + 0.00291804 *lens_ipow(x, 2) + -2.8692 *lens_ipow(dx, 2)*lambda + -0.0476098 *x*dx*lambda + -0.181247 *lens_ipow(lambda, 4) + 0.503126 *lens_ipow(dy, 4) + 2.58168 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 0.000655382 *x*lens_ipow(y, 2)*dx*lambda + 3.73172 *lens_ipow(dx, 2)*lens_ipow(lambda, 4) + 61.4732 *lens_ipow(dx, 4)*lens_ipow(lambda, 3) + 2.54981e-05 *lens_ipow(x, 5)*dx*lambda + -81.0815 *lens_ipow(dx, 4)*lens_ipow(lambda, 4) + -2.95267 *y*lens_ipow(dx, 2)*lens_ipow(dy, 3)*lens_ipow(lambda, 2)+0.0f;
const double dx23 =  + -0.795619 *dx*dy + 0.0438188 *y*dx + 0.0501293 *x*dy + 0.00267795 *x*y + 2.0125 *dx*lens_ipow(dy, 3) + 1.72112 *lens_ipow(dx, 3)*dy + -0.00640242 *x*y*lens_ipow(dy, 2) + 0.000260031 *lens_ipow(x, 3)*dy + -2.95267 *y*lens_ipow(dx, 3)*lens_ipow(dy, 2)*lens_ipow(lambda, 2)+0.0f;
const double dx24 =  + -0.455033 *dx + 0.90503 *dx*lambda + -0.956398 *lens_ipow(dx, 3) + -0.0238049 *x*lens_ipow(dx, 2) + -0.724986 *dx*lens_ipow(lambda, 3) + 0.000327691 *x*lens_ipow(y, 2)*lens_ipow(dx, 2) + 4.97562 *lens_ipow(dx, 3)*lens_ipow(lambda, 3) + 36.8839 *lens_ipow(dx, 5)*lens_ipow(lambda, 2) + 1.27491e-05 *lens_ipow(x, 5)*lens_ipow(dx, 2) + -64.8652 *lens_ipow(dx, 5)*lens_ipow(lambda, 3) + -1.96845 *y*lens_ipow(dx, 3)*lens_ipow(dy, 3)*lambda+0.0f;
const double dx30 =  + 0.0440091 *dx*dy + 0.00268451 *y*dx + 0.000593409 *x*dy + -7.39114e-05 *x*y + -0.00212758 *y*lens_ipow(dx, 3) + -2.07443e-06 *x*lens_ipow(y, 3) + -2.33865e-06 *lens_ipow(x, 3)*y + 0.000647054 *x*y*lens_ipow(dy, 2)*lambda + -0.607136 *lens_ipow(dx, 3)*lens_ipow(dy, 3)*lambda+0.0f;
const double dx31 =  + -0.0549277  + 0.0827173 *lens_ipow(dy, 2) + 0.024941 *lens_ipow(dx, 2) + 0.00584961 *y*dy + -0.000136029 *lens_ipow(y, 2) + 0.00268451 *x*dx + -3.69557e-05 *lens_ipow(x, 2) + -0.0266875 *lens_ipow(dy, 2)*lambda + -0.0175337 *lens_ipow(dy, 4) + 0.000416199 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -2.20316e-06 *lens_ipow(y, 4) + -0.00212758 *x*lens_ipow(dx, 3) + -3.11164e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + -5.84663e-07 *lens_ipow(x, 4) + 0.00145097 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda + 0.000323527 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lambda+0.0f;
const double dx32 =  + -0.786718 *dx*dy + 0.0498819 *y*dx + 0.0440091 *x*dy + 0.00268451 *x*y + 1.67955 *dx*lens_ipow(dy, 3) + 1.9174 *lens_ipow(dx, 3)*dy + 0.000277466 *lens_ipow(y, 3)*dx + -0.00638275 *x*y*lens_ipow(dx, 2) + -1.82141 *x*lens_ipow(dx, 2)*lens_ipow(dy, 3)*lambda+0.0f;
const double dx33 =  + -0.0817883  + -0.0865791 *lambda + -0.393359 *lens_ipow(dx, 2) + 0.165435 *y*dy + 0.0029248 *lens_ipow(y, 2) + 0.0440091 *x*dx + 0.000296704 *lens_ipow(x, 2) + -2.60215 *lens_ipow(dy, 2)*lambda + -0.0533751 *y*dy*lambda + 2.51933 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 0.479349 *lens_ipow(dx, 4) + -0.0701348 *y*lens_ipow(dy, 3) + 0.000967311 *lens_ipow(y, 3)*dy*lambda + 0.000647054 *lens_ipow(x, 2)*y*dy*lambda + 26.8831 *lens_ipow(dy, 4)*lens_ipow(lambda, 3) + -1.82141 *x*lens_ipow(dx, 3)*lens_ipow(dy, 2)*lambda + 7.44937 *lens_ipow(dy, 2)*lens_ipow(lambda, 6) + -75.5234 *lens_ipow(dy, 4)*lens_ipow(lambda, 6)+0.0f;
const double dx34 =  + -0.0865791 *dy + -0.867382 *lens_ipow(dy, 3) + -0.0266875 *y*lens_ipow(dy, 2) + 0.000483655 *lens_ipow(y, 3)*lens_ipow(dy, 2) + 0.000323527 *lens_ipow(x, 2)*y*lens_ipow(dy, 2) + 16.1298 *lens_ipow(dy, 5)*lens_ipow(lambda, 2) + -0.607136 *x*lens_ipow(dx, 3)*lens_ipow(dy, 3) + 14.8987 *lens_ipow(dy, 3)*lens_ipow(lambda, 5) + -90.6281 *lens_ipow(dy, 5)*lens_ipow(lambda, 5)+0.0f;
const double dx40 =  + -0.000771865 *dx + -6.08416e-05 *x + -0.000615425 *y*dx*dy + -4.48958e-05 *lens_ipow(y, 2)*dx + -6.70956e-06 *x*lens_ipow(y, 2) + -2.35838e-06 *x*lens_ipow(y, 3)*dy + -2.48474e-05 *lens_ipow(x, 3)*lens_ipow(dy, 2) + -0.00013109 *lens_ipow(x, 3)*lens_ipow(dx, 2) + -3.76104e-06 *lens_ipow(x, 3)*y*dy + -5.76901e-06 *lens_ipow(x, 4)*dx + -1.30201e-07 *lens_ipow(x, 5) + -4.31969e-05 *lens_ipow(x, 4)*lens_ipow(dx, 3)+0.0f;
const double dx41 =  + -0.000970333 *dy + -6.4714e-05 *y + -0.000438679 *y*lens_ipow(dx, 2) + -0.000615425 *x*dx*dy + -8.97915e-05 *x*y*dx + -6.70956e-06 *lens_ipow(x, 2)*y + -7.85634e-05 *lens_ipow(y, 3)*lens_ipow(dy, 2) + -5.1847e-06 *lens_ipow(y, 4)*dy + -1.41056e-07 *lens_ipow(y, 5) + -3.53757e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*dy + -9.40259e-07 *lens_ipow(x, 4)*dy+0.0f;
const double dx42 =  + -0.0134448 *dx + -0.000771865 *x + -0.10664 *dx*lens_ipow(dy, 2) + -0.142237 *lens_ipow(dx, 3) + -0.000438679 *lens_ipow(y, 2)*dx + -0.000615425 *x*y*dy + -4.48958e-05 *x*lens_ipow(y, 2) + -6.55452e-05 *lens_ipow(x, 4)*dx + -1.1538e-06 *lens_ipow(x, 5) + -2.59181e-05 *lens_ipow(x, 5)*lens_ipow(dx, 2)+0.0f;
const double dx43 =  + -0.0169028 *dy + -0.000970333 *y + -0.125693 *lens_ipow(dy, 3) + -0.10664 *lens_ipow(dx, 2)*dy + -0.000615425 *x*y*dx + -3.92817e-05 *lens_ipow(y, 4)*dy + -1.03694e-06 *lens_ipow(y, 5) + -1.17919e-06 *lens_ipow(x, 2)*lens_ipow(y, 3) + -1.24237e-05 *lens_ipow(x, 4)*dy + -9.40259e-07 *lens_ipow(x, 4)*y+0.0f;
const double dx44 =  + 3.03891  + -16.5945 *lambda + 36.2405 *lens_ipow(lambda, 2) + -36.5826 *lens_ipow(lambda, 3) + 14.2103 *lens_ipow(lambda, 4)+0.0f;
} break;
