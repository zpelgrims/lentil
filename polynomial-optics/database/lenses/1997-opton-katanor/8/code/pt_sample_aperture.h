case opton__katanor__1997__8mm:
{
double pred_x;
double pred_y;
double pred_dx;
double pred_dy;
double sqr_err = FLT_MAX;
for(int k=0;k<5&&sqr_err > 1e-4f;k++)
{
  const double begin_x = x + dist * dx;
  const double begin_y = y + dist * dy;
  const double begin_dx = dx;
  const double begin_dy = dy;
  const double begin_lambda = lambda;
  pred_x =  + 18.7155 *begin_dx + 0.212004 *begin_x + 1.63457 *begin_dx*lens_ipow(begin_dy, 2) + 1.37548 *lens_ipow(begin_dx, 3) + 0.833112 *begin_y*begin_dx*begin_dy + 0.12976 *begin_x*lens_ipow(begin_dy, 2) + 0.929414 *begin_x*lens_ipow(begin_dx, 2) + -0.00133904 *begin_x*lens_ipow(begin_y, 2) + -0.00108509 *lens_ipow(begin_x, 3) + 0.00938185 *lens_ipow(begin_y, 2)*begin_dx*begin_lambda + 0.00699149 *begin_x*begin_y*begin_dy*begin_lambda + 0.0200721 *lens_ipow(begin_x, 2)*begin_dx*begin_lambda + 5.32923 *begin_dx*lens_ipow(begin_dy, 4) + 11.0318 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2) + 7.9547 *lens_ipow(begin_dx, 5) + 0.488131 *begin_x*lens_ipow(begin_dx, 4) + 0.0298308 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 3) + -9.57654e-06 *lens_ipow(begin_x, 5) + -0.747441 *lens_ipow(begin_dx, 3)*lens_ipow(begin_lambda, 3) + -0.000470283 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dx*begin_lambda + -0.000403633 *lens_ipow(begin_x, 4)*begin_dx*begin_lambda + 4.42048e-06 *lens_ipow(begin_x, 5)*begin_lambda + 0.000115456 *begin_x*lens_ipow(begin_y, 4)*lens_ipow(begin_dy, 2)*begin_lambda + -7.89244e-06 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 3)*begin_dy*begin_lambda + -3.97933e-06 *lens_ipow(begin_x, 5)*begin_y*begin_dy*begin_lambda + -3.78966e-06 *lens_ipow(begin_y, 6)*begin_dx*lens_ipow(begin_lambda, 2) + -1.86558e-08 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 4) + -3.12644e-11 *begin_x*lens_ipow(begin_y, 10);
  pred_y =  + 18.7159 *begin_dy + 0.21049 *begin_y + 1.70613 *lens_ipow(begin_dy, 3) + 1.53398 *lens_ipow(begin_dx, 2)*begin_dy + 0.969774 *begin_y*lens_ipow(begin_dy, 2) + 0.132787 *begin_y*lens_ipow(begin_dx, 2) + -0.00102434 *lens_ipow(begin_y, 3) + 0.86662 *begin_x*begin_dx*begin_dy + -0.0010268 *lens_ipow(begin_x, 2)*begin_y + 0.0149868 *lens_ipow(begin_y, 2)*begin_dy*begin_lambda + 0.00705968 *begin_x*begin_y*begin_dx*begin_lambda + 0.0102134 *lens_ipow(begin_x, 2)*begin_dy*begin_lambda + 5.74135 *lens_ipow(begin_dy, 5) + 11.7558 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3) + 6.0209 *lens_ipow(begin_dx, 4)*begin_dy + -1.04835e-05 *lens_ipow(begin_y, 5) + -0.0017076 *begin_x*lens_ipow(begin_y, 2)*begin_dx*begin_dy + -1.4277e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3) + -0.00169232 *lens_ipow(begin_x, 3)*begin_dx*begin_dy + -7.82022e-06 *lens_ipow(begin_x, 4)*begin_y + -0.777232 *lens_ipow(begin_dy, 3)*lens_ipow(begin_lambda, 3) + 5.31462e-06 *lens_ipow(begin_y, 5)*begin_lambda + -0.000143882 *lens_ipow(begin_x, 4)*begin_dy*begin_lambda + -2.85648e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4)*begin_dy*begin_lambda + -1.59902e-05 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 3)*begin_dx*begin_lambda + -5.68608e-08 *begin_x*lens_ipow(begin_y, 7)*begin_dx + -5.11094e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 5)*lens_ipow(begin_dy, 2) + -1.33292e-07 *lens_ipow(begin_y, 8)*begin_dy*begin_lambda;
  pred_dx =  + -0.0549401 *begin_x + -0.455033 *begin_dx*begin_lambda + 0.452515 *begin_dx*lens_ipow(begin_lambda, 2) + -0.397809 *begin_dx*lens_ipow(begin_dy, 2) + 0.0438188 *begin_y*begin_dx*begin_dy + 0.000295101 *lens_ipow(begin_y, 2)*begin_dx + 0.0250647 *begin_x*lens_ipow(begin_dy, 2) + 0.0810692 *begin_x*lens_ipow(begin_dx, 2) + 0.00267795 *begin_x*begin_y*begin_dy + -3.79402e-05 *begin_x*lens_ipow(begin_y, 2) + 0.00291804 *lens_ipow(begin_x, 2)*begin_dx + -4.10452e-05 *lens_ipow(begin_x, 3) + -0.956398 *lens_ipow(begin_dx, 3)*begin_lambda + -0.0238049 *begin_x*lens_ipow(begin_dx, 2)*begin_lambda + -0.181247 *begin_dx*lens_ipow(begin_lambda, 4) + 0.503126 *begin_dx*lens_ipow(begin_dy, 4) + 0.860558 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2) + -0.00213414 *begin_x*begin_y*lens_ipow(begin_dy, 3) + -5.56901e-07 *begin_x*lens_ipow(begin_y, 4) + 0.000130016 *lens_ipow(begin_x, 3)*lens_ipow(begin_dy, 2) + -1.02516e-06 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2) + -5.39305e-07 *lens_ipow(begin_x, 5) + 0.000327691 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*begin_lambda + 1.24391 *lens_ipow(begin_dx, 3)*lens_ipow(begin_lambda, 4) + 12.2946 *lens_ipow(begin_dx, 5)*lens_ipow(begin_lambda, 3) + 1.27491e-05 *lens_ipow(begin_x, 5)*lens_ipow(begin_dx, 2)*begin_lambda + -16.2163 *lens_ipow(begin_dx, 5)*lens_ipow(begin_lambda, 4) + -0.984223 *begin_y*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 3)*lens_ipow(begin_lambda, 2);
  pred_dy =  + -0.0817883 *begin_dy + -0.0549277 *begin_y + -0.0865791 *begin_dy*begin_lambda + -0.393359 *lens_ipow(begin_dx, 2)*begin_dy + 0.0827173 *begin_y*lens_ipow(begin_dy, 2) + 0.024941 *begin_y*lens_ipow(begin_dx, 2) + 0.0029248 *lens_ipow(begin_y, 2)*begin_dy + -4.5343e-05 *lens_ipow(begin_y, 3) + 0.0440091 *begin_x*begin_dx*begin_dy + 0.00268451 *begin_x*begin_y*begin_dx + 0.000296704 *lens_ipow(begin_x, 2)*begin_dy + -3.69557e-05 *lens_ipow(begin_x, 2)*begin_y + -0.867382 *lens_ipow(begin_dy, 3)*begin_lambda + -0.0266875 *begin_y*lens_ipow(begin_dy, 2)*begin_lambda + 0.839776 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3) + 0.479349 *lens_ipow(begin_dx, 4)*begin_dy + -0.0175337 *begin_y*lens_ipow(begin_dy, 4) + 0.000138733 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2) + -4.40632e-07 *lens_ipow(begin_y, 5) + -0.00212758 *begin_x*begin_y*lens_ipow(begin_dx, 3) + -1.03721e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3) + -5.84663e-07 *lens_ipow(begin_x, 4)*begin_y + 0.000483655 *lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 2)*begin_lambda + 0.000323527 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dy, 2)*begin_lambda + 5.37662 *lens_ipow(begin_dy, 5)*lens_ipow(begin_lambda, 3) + -0.607136 *begin_x*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 3)*begin_lambda + 2.48312 *lens_ipow(begin_dy, 3)*lens_ipow(begin_lambda, 6) + -15.1047 *lens_ipow(begin_dy, 5)*lens_ipow(begin_lambda, 6);
  Eigen::Matrix2d dx1_domega0;
  dx1_domega0(0, 0) =  + 18.7155  + 1.63457 *lens_ipow(begin_dy, 2) + 4.12645 *lens_ipow(begin_dx, 2) + 0.833112 *begin_y*begin_dy + 1.85883 *begin_x*begin_dx + 0.00938185 *lens_ipow(begin_y, 2)*begin_lambda + 0.0200721 *lens_ipow(begin_x, 2)*begin_lambda + 5.32923 *lens_ipow(begin_dy, 4) + 33.0955 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + 39.7735 *lens_ipow(begin_dx, 4) + 1.95252 *begin_x*lens_ipow(begin_dx, 3) + 0.0894923 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 2) + -2.24232 *lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 3) + -0.000470283 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_lambda + -0.000403633 *lens_ipow(begin_x, 4)*begin_lambda + -3.78966e-06 *lens_ipow(begin_y, 6)*lens_ipow(begin_lambda, 2)+0.0f;
  dx1_domega0(0, 1) =  + 3.26914 *begin_dx*begin_dy + 0.833112 *begin_y*begin_dx + 0.259521 *begin_x*begin_dy + 0.00699149 *begin_x*begin_y*begin_lambda + 21.3169 *begin_dx*lens_ipow(begin_dy, 3) + 22.0637 *lens_ipow(begin_dx, 3)*begin_dy + 0.000230912 *begin_x*lens_ipow(begin_y, 4)*begin_dy*begin_lambda + -7.89244e-06 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 3)*begin_lambda + -3.97933e-06 *lens_ipow(begin_x, 5)*begin_y*begin_lambda+0.0f;
  dx1_domega0(1, 0) =  + 3.06797 *begin_dx*begin_dy + 0.265575 *begin_y*begin_dx + 0.86662 *begin_x*begin_dy + 0.00705968 *begin_x*begin_y*begin_lambda + 23.5116 *begin_dx*lens_ipow(begin_dy, 3) + 24.0836 *lens_ipow(begin_dx, 3)*begin_dy + -0.0017076 *begin_x*lens_ipow(begin_y, 2)*begin_dy + -0.00169232 *lens_ipow(begin_x, 3)*begin_dy + -1.59902e-05 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 3)*begin_lambda + -5.68608e-08 *begin_x*lens_ipow(begin_y, 7)+0.0f;
  dx1_domega0(1, 1) =  + 18.7159  + 5.11838 *lens_ipow(begin_dy, 2) + 1.53398 *lens_ipow(begin_dx, 2) + 1.93955 *begin_y*begin_dy + 0.86662 *begin_x*begin_dx + 0.0149868 *lens_ipow(begin_y, 2)*begin_lambda + 0.0102134 *lens_ipow(begin_x, 2)*begin_lambda + 28.7067 *lens_ipow(begin_dy, 4) + 35.2674 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + 6.0209 *lens_ipow(begin_dx, 4) + -0.0017076 *begin_x*lens_ipow(begin_y, 2)*begin_dx + -0.00169232 *lens_ipow(begin_x, 3)*begin_dx + -2.3317 *lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 3) + -0.000143882 *lens_ipow(begin_x, 4)*begin_lambda + -2.85648e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4)*begin_lambda + -1.02219e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 5)*begin_dy + -1.33292e-07 *lens_ipow(begin_y, 8)*begin_lambda+0.0f;
  Eigen::Matrix2d invJ;
  const double invdet = 1.0f/(dx1_domega0(0, 0)*dx1_domega0(1, 1) - dx1_domega0(0, 1)*dx1_domega0(1, 0));
  invJ(0, 0) =  dx1_domega0(1, 1)*invdet;
  invJ(1, 1) =  dx1_domega0(0, 0)*invdet;
  invJ(0, 1) = -dx1_domega0(0, 1)*invdet;
  invJ(1, 0) = -dx1_domega0(1, 0)*invdet;
  const Eigen::Vector2d dx1(out_x - pred_x, out_y - pred_y);
  for(int i=0;i<2;i++)
  {
    dx += invJ(0, i)*dx1(i);
    dy += invJ(1, i)*dx1(i);
  }
  sqr_err = dx1(0)*dx1(0) + dx1(1)*dx1(1);
}
out_dx = pred_dx;
out_dy = pred_dy;
} break;
