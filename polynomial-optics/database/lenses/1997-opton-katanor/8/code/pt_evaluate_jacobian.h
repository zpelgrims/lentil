case opton__katanor__1997__8mm:
{
const double dx00 =  + -3.66916  + -0.107979 *lambda + 0.0849807 *lens_ipow(dx, 2) + 0.00600088 *lens_ipow(y, 2) + 0.0187206 *lens_ipow(x, 2) + 0.177711 *y*dy*lambda + 0.420598 *x*dx*lambda + -0.161629 *y*dy*lens_ipow(lambda, 2) + -0.171108 *y*lens_ipow(dy, 3) + -0.3263 *y*lens_ipow(dx, 2)*dy + 0.000736275 *lens_ipow(y, 3)*dy + -5.92794e-05 *lens_ipow(y, 4) + 0.00269375 *x*lens_ipow(y, 2)*dx + 0.00227736 *lens_ipow(x, 2)*y*dy + -0.000373187 *lens_ipow(x, 2)*lens_ipow(y, 2) + 0.00468101 *lens_ipow(x, 3)*dx + -0.467728 *x*dx*lens_ipow(lambda, 3) + -0.00119952 *lens_ipow(x, 4)*lambda + 0.00109638 *lens_ipow(x, 4)*lens_ipow(lambda, 2) + -170.111 *lens_ipow(dx, 6)*lens_ipow(dy, 2)+0.0f;
const double dx01 =  + 0.0994438 *y*dx + 0.0120018 *x*y + 0.177711 *x*dy*lambda + -0.161629 *x*dy*lens_ipow(lambda, 2) + -0.171108 *x*lens_ipow(dy, 3) + -0.3263 *x*lens_ipow(dx, 2)*dy + 0.00220882 *x*lens_ipow(y, 2)*dy + -0.000237118 *x*lens_ipow(y, 3) + 0.00269375 *lens_ipow(x, 2)*y*dx + 0.00075912 *lens_ipow(x, 3)*dy + -0.000248791 *lens_ipow(x, 3)*y + -35.8209 *dx*lens_ipow(dy, 7) + -220.156 *lens_ipow(dx, 5)*lens_ipow(dy, 3) + 0.100993 *lens_ipow(y, 3)*lens_ipow(dx, 5)+0.0f;
const double dx02 =  + 7.22481  + 1.13935 *lambda + 0.0497219 *lens_ipow(y, 2) + 0.169961 *x*dx + 0.210299 *lens_ipow(x, 2)*lambda + -0.6526 *x*y*dx*dy + 0.00134687 *lens_ipow(x, 2)*lens_ipow(y, 2) + 0.00117025 *lens_ipow(x, 4) + -0.233864 *lens_ipow(x, 2)*lens_ipow(lambda, 3) + 2022.17 *lens_ipow(dx, 8) + -35.8209 *y*lens_ipow(dy, 7) + -1100.78 *y*lens_ipow(dx, 4)*lens_ipow(dy, 3) + 0.126241 *lens_ipow(y, 4)*lens_ipow(dx, 4) + -1020.66 *x*lens_ipow(dx, 5)*lens_ipow(dy, 2) + 6423.63 *lens_ipow(dx, 2)*lens_ipow(dy, 6)*lambda+0.0f;
const double dx03 =  + 0.177711 *x*y*lambda + -0.161629 *x*y*lens_ipow(lambda, 2) + -0.513325 *x*y*lens_ipow(dy, 2) + -0.3263 *x*y*lens_ipow(dx, 2) + 0.000736275 *x*lens_ipow(y, 3) + 0.00075912 *lens_ipow(x, 3)*y + -250.746 *y*dx*lens_ipow(dy, 6) + -660.467 *y*lens_ipow(dx, 5)*lens_ipow(dy, 2) + -340.222 *x*lens_ipow(dx, 6)*dy + 12847.3 *lens_ipow(dx, 3)*lens_ipow(dy, 5)*lambda+0.0f;
const double dx04 =  + 1.13935 *dx + -0.107979 *x + 0.177711 *x*y*dy + 0.210299 *lens_ipow(x, 2)*dx + -0.323257 *x*y*dy*lambda + -0.701592 *lens_ipow(x, 2)*dx*lens_ipow(lambda, 2) + -0.000239904 *lens_ipow(x, 5) + 0.000438552 *lens_ipow(x, 5)*lambda + 2141.21 *lens_ipow(dx, 3)*lens_ipow(dy, 6)+0.0f;
const double dx10 =  + 0.0943868 *x*dy + 0.00897003 *x*y + 0.105916 *y*dx*lambda + 0.0031287 *x*lens_ipow(y, 2)*dy + -0.709852 *y*dx*lens_ipow(dy, 2)*lambda + -0.524387 *y*lens_ipow(dx, 3)*lens_ipow(lambda, 2) + -4.26489e-06 *x*lens_ipow(y, 5) + 0.000178559 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx + -9.15062e-06 *lens_ipow(x, 3)*lens_ipow(y, 3) + -4.1039e-06 *lens_ipow(x, 5)*y + -245.723 *lens_ipow(dx, 3)*lens_ipow(dy, 5) + -29.6761 *lens_ipow(dx, 7)*dy + -1.38489e-05 *lens_ipow(y, 6)*dx*dy + 0.114715 *lens_ipow(x, 3)*lens_ipow(dy, 5)+0.0f;
const double dx11 =  + -3.66475  + -0.101463 *lambda + 0.0169798 *lens_ipow(y, 2) + 0.00448502 *lens_ipow(x, 2) + 0.372948 *y*dy*lambda + 0.105916 *x*dx*lambda + 0.00502491 *lens_ipow(y, 3)*dy + 0.0031287 *lens_ipow(x, 2)*y*dy + -0.406366 *y*dy*lens_ipow(lambda, 3) + -0.00101739 *lens_ipow(y, 4)*lambda + -0.709852 *x*dx*lens_ipow(dy, 2)*lambda + 0.000917848 *lens_ipow(y, 4)*lens_ipow(lambda, 2) + -0.524387 *x*lens_ipow(dx, 3)*lens_ipow(lambda, 2) + -1.06622e-05 *lens_ipow(x, 2)*lens_ipow(y, 4) + 0.000178559 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + -6.86297e-06 *lens_ipow(x, 4)*lens_ipow(y, 2) + -6.83984e-07 *lens_ipow(x, 6) + -165.431 *lens_ipow(dx, 2)*lens_ipow(dy, 6) + -8.30934e-05 *x*lens_ipow(y, 5)*dx*dy+0.0f;
const double dx12 =  + 0.105916 *x*y*lambda + -0.709852 *x*y*lens_ipow(dy, 2)*lambda + -1.57316 *x*y*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + 5.95196e-05 *lens_ipow(x, 3)*lens_ipow(y, 3) + -330.862 *y*dx*lens_ipow(dy, 6) + -737.169 *x*lens_ipow(dx, 2)*lens_ipow(dy, 5) + -207.732 *x*lens_ipow(dx, 6)*dy + -1.38489e-05 *x*lens_ipow(y, 6)*dy + 13119.4 *lens_ipow(dx, 5)*lens_ipow(dy, 3)*lambda+0.0f;
const double dx13 =  + 7.35994  + 1.1629 *lambda + -6.58074 *lens_ipow(dy, 2) + 0.0471934 *lens_ipow(x, 2) + 0.186474 *lens_ipow(y, 2)*lambda + 0.00125623 *lens_ipow(y, 4) + 0.00156435 *lens_ipow(x, 2)*lens_ipow(y, 2) + -0.203183 *lens_ipow(y, 2)*lens_ipow(lambda, 3) + -1.4197 *x*y*dx*dy*lambda + 549.705 *lens_ipow(dy, 6) + -992.585 *y*lens_ipow(dx, 2)*lens_ipow(dy, 5) + -1228.61 *x*lens_ipow(dx, 3)*lens_ipow(dy, 4) + -29.6761 *x*lens_ipow(dx, 7) + -1.38489e-05 *x*lens_ipow(y, 6)*dx + 0.143393 *lens_ipow(x, 4)*lens_ipow(dy, 4) + 6559.68 *lens_ipow(dx, 6)*lens_ipow(dy, 2)*lambda+0.0f;
const double dx14 =  + 1.1629 *dy + -0.101463 *y + 0.186474 *lens_ipow(y, 2)*dy + 0.105916 *x*y*dx + -0.60955 *lens_ipow(y, 2)*dy*lens_ipow(lambda, 2) + -0.000203478 *lens_ipow(y, 5) + -0.709852 *x*y*dx*lens_ipow(dy, 2) + 0.000367139 *lens_ipow(y, 5)*lambda + -1.04877 *x*y*lens_ipow(dx, 3)*lambda + 2186.56 *lens_ipow(dx, 6)*lens_ipow(dy, 3)+0.0f;
const double dx20 =  + -0.066524  + 0.00465117 *lambda + 0.000251407 *lens_ipow(y, 2) + -0.00173956 *x*dx + 0.00106748 *lens_ipow(x, 2) + -0.00161326 *y*dy*lambda + -0.0044946 *y*lens_ipow(dx, 2)*dy + -2.82341e-05 *lens_ipow(y, 3)*dy + 1.49506e-06 *lens_ipow(y, 4) + -7.04539e-05 *x*lens_ipow(y, 2)*dx + -8.72522e-05 *lens_ipow(x, 2)*y*dy + 7.89533e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + -0.00011538 *lens_ipow(x, 3)*dx + 4.68759e-06 *lens_ipow(x, 4) + 0.00192499 *y*dy*lens_ipow(lambda, 3) + -0.00677485 *y*lens_ipow(dy, 5) + -0.000105174 *lens_ipow(y, 2)*lens_ipow(lambda, 5) + -0.000327842 *lens_ipow(x, 2)*lens_ipow(lambda, 5) + -0.0037943 *lens_ipow(x, 3)*lens_ipow(dx, 7)+0.0f;
const double dx21 =  + 0.000502814 *x*y + -0.00161326 *x*dy*lambda + 0.00451262 *y*lens_ipow(dx, 3) + -1.59641e-05 *lens_ipow(y, 3)*dx + -0.0044946 *x*lens_ipow(dx, 2)*dy + -8.47022e-05 *x*lens_ipow(y, 2)*dy + 5.98022e-06 *x*lens_ipow(y, 3) + -7.04539e-05 *lens_ipow(x, 2)*y*dx + -2.90841e-05 *lens_ipow(x, 3)*dy + 5.26355e-06 *lens_ipow(x, 3)*y + 0.00192499 *x*dy*lens_ipow(lambda, 3) + -0.00677485 *x*lens_ipow(dy, 5) + -0.000210348 *x*y*lens_ipow(lambda, 5)+0.0f;
const double dx22 =  + -0.13587  + 0.0130168 *lambda + 0.0406427 *lens_ipow(dy, 2) + 0.0821219 *lens_ipow(dx, 2) + -0.000869781 *lens_ipow(x, 2) + 0.413343 *lens_ipow(dy, 4) + 2.35392 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 2.10895 *lens_ipow(dx, 4) + 0.00676892 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -3.99103e-06 *lens_ipow(y, 4) + -0.00898921 *x*y*dx*dy + -3.5227e-05 *lens_ipow(x, 2)*lens_ipow(y, 2) + -2.8845e-05 *lens_ipow(x, 4) + -0.00664002 *lens_ipow(x, 4)*lens_ipow(dx, 6)+0.0f;
const double dx23 =  + 0.0812854 *dx*dy + -0.00161326 *x*y*lambda + 1.65337 *dx*lens_ipow(dy, 3) + 1.56928 *lens_ipow(dx, 3)*dy + -0.0044946 *x*y*lens_ipow(dx, 2) + -2.82341e-05 *x*lens_ipow(y, 3) + -2.90841e-05 *lens_ipow(x, 3)*y + 0.00192499 *x*y*lens_ipow(lambda, 3) + -0.0338743 *x*y*lens_ipow(dy, 4)+0.0f;
const double dx24 =  + 0.0130168 *dx + 0.00465117 *x + -0.00161326 *x*y*dy + 0.00577497 *x*y*dy*lens_ipow(lambda, 2) + -0.00052587 *x*lens_ipow(y, 2)*lens_ipow(lambda, 4) + -0.000546404 *lens_ipow(x, 3)*lens_ipow(lambda, 4)+0.0f;
const double dx30 =  + -0.00122367 *x*dy + 0.00095537 *x*y + -0.00440404 *y*dx*lambda + 0.00405186 *y*dx*lens_ipow(lambda, 2) + 0.00475413 *x*lens_ipow(dy, 3) + -6.51575e-05 *x*lens_ipow(y, 2)*dy + -0.0101119 *y*lens_ipow(dx, 5) + -4.59191e-07 *lens_ipow(y, 5)*dx + 6.07158e-08 *x*lens_ipow(y, 5) + -0.000613165 *lens_ipow(x, 2)*y*dx*lens_ipow(dy, 2) + -0.00020796 *x*y*lens_ipow(lambda, 5) + -2.10644e-07 *lens_ipow(x, 4)*lens_ipow(y, 3)*dx + -15.3524 *lens_ipow(dx, 7)*lens_ipow(dy, 3) + -0.022289 *lens_ipow(y, 3)*lens_ipow(dx, 3)*lens_ipow(dy, 4)+0.0f;
const double dx31 =  + -0.0666188  + 0.00457627 *lambda + -0.00204596 *lens_ipow(dx, 2) + -0.00173425 *y*dy + 0.00113774 *lens_ipow(y, 2) + 0.000477685 *lens_ipow(x, 2) + -0.00440404 *x*dx*lambda + -0.000121396 *lens_ipow(y, 3)*dy + 0.00405186 *x*dx*lens_ipow(lambda, 2) + -6.51575e-05 *lens_ipow(x, 2)*y*dy + 7.28358e-08 *lens_ipow(y, 6) + -0.0101119 *x*lens_ipow(dx, 5) + -2.29596e-06 *x*lens_ipow(y, 4)*dx + 1.51789e-07 *lens_ipow(x, 2)*lens_ipow(y, 4) + -0.000204388 *lens_ipow(x, 3)*dx*lens_ipow(dy, 2) + -0.000307564 *lens_ipow(y, 2)*lens_ipow(lambda, 5) + -0.00010398 *lens_ipow(x, 2)*lens_ipow(lambda, 5) + -1.26386e-07 *lens_ipow(x, 5)*lens_ipow(y, 2)*dx + -0.0668669 *x*lens_ipow(y, 2)*lens_ipow(dx, 3)*lens_ipow(dy, 4)+0.0f;
const double dx32 =  + 0.234471 *dx*dy + -0.00409192 *y*dx + -0.00440404 *x*y*lambda + 0.00405186 *x*y*lens_ipow(lambda, 2) + 4.66711 *dx*lens_ipow(dy, 5) + -0.0505596 *x*y*lens_ipow(dx, 4) + -4.59191e-07 *x*lens_ipow(y, 5) + -0.000204388 *lens_ipow(x, 3)*y*lens_ipow(dy, 2) + -4.21288e-08 *lens_ipow(x, 5)*lens_ipow(y, 3) + -107.467 *x*lens_ipow(dx, 6)*lens_ipow(dy, 3) + -0.0668669 *x*lens_ipow(y, 3)*lens_ipow(dx, 2)*lens_ipow(dy, 4)+0.0f;
const double dx33 =  + -0.136414  + 0.0127708 *lambda + 0.148771 *lens_ipow(dy, 2) + 0.117236 *lens_ipow(dx, 2) + -0.000867126 *lens_ipow(y, 2) + -0.000611837 *lens_ipow(x, 2) + 1.60001 *lens_ipow(dy, 4) + -3.03489e-05 *lens_ipow(y, 4) + 0.0071312 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -3.25788e-05 *lens_ipow(x, 2)*lens_ipow(y, 2) + 11.6678 *lens_ipow(dx, 2)*lens_ipow(dy, 4) + -0.000408777 *lens_ipow(x, 3)*y*dx*dy + -46.0572 *x*lens_ipow(dx, 7)*lens_ipow(dy, 2) + -0.0891559 *x*lens_ipow(y, 3)*lens_ipow(dx, 3)*lens_ipow(dy, 3)+0.0f;
const double dx34 =  + 0.0127708 *dy + 0.00457627 *y + -0.00440404 *x*y*dx + 0.00810372 *x*y*dx*lambda + -0.000512607 *lens_ipow(y, 3)*lens_ipow(lambda, 4) + -0.000519901 *lens_ipow(x, 2)*y*lens_ipow(lambda, 4)+0.0f;
const double dx40 =  + -0.000551075 *dx + -0.000391611 *y*dx*dy + -1.04608e-05 *x*lens_ipow(y, 2) + -1.06943e-05 *lens_ipow(x, 3) + -0.0013694 *x*lens_ipow(dx, 2)*lambda + -4.47181e-05 *lens_ipow(x, 2)*dx*lambda + -0.0310621 *dx*lens_ipow(dy, 4) + -0.0301986 *lens_ipow(dx, 5) + -0.00290283 *x*lens_ipow(dy, 4)*lambda + 0.452695 *y*lens_ipow(dx, 5)*lens_ipow(dy, 3)+0.0f;
const double dx41 =  + -0.000664144 *dy + -0.000735153 *y*lens_ipow(dy, 2) + -1.03947e-05 *lens_ipow(y, 3) + -0.000391611 *x*dx*dy + -1.04608e-05 *lens_ipow(x, 2)*y + -0.0314894 *lens_ipow(dy, 5) + -0.000485171 *lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + -2.86319e-05 *lens_ipow(y, 3)*lens_ipow(dx, 2)*lambda + 0.452695 *x*lens_ipow(dx, 5)*lens_ipow(dy, 3)+0.0f;
const double dx42 =  + -0.000551075 *x + -0.42804 *dx*lens_ipow(dy, 2) + -0.420802 *lens_ipow(dx, 3) + -0.000391611 *x*y*dy + -0.0013694 *lens_ipow(x, 2)*dx*lambda + -1.4906e-05 *lens_ipow(x, 3)*lambda + -0.000323448 *lens_ipow(y, 3)*dx*dy + -0.0310621 *x*lens_ipow(dy, 4) + -0.150993 *x*lens_ipow(dx, 4) + -1.43159e-05 *lens_ipow(y, 4)*dx*lambda + -6.49376 *lens_ipow(dx, 7) + -218.086 *lens_ipow(dx, 5)*lens_ipow(dy, 4) + 2.26348 *x*y*lens_ipow(dx, 4)*lens_ipow(dy, 3) + -35.6533 *dx*lens_ipow(dy, 8)*lambda+0.0f;
const double dx43 =  + -0.000664144 *y + -0.420904 *lens_ipow(dy, 3) + -0.42804 *lens_ipow(dx, 2)*dy + -0.000735153 *lens_ipow(y, 2)*dy + -0.000391611 *x*y*dx + -0.157447 *y*lens_ipow(dy, 4) + -0.000161724 *lens_ipow(y, 3)*lens_ipow(dx, 2) + -0.124248 *x*dx*lens_ipow(dy, 3) + -0.00580565 *lens_ipow(x, 2)*lens_ipow(dy, 3)*lambda + -6.11801 *lens_ipow(dy, 7) + -145.391 *lens_ipow(dx, 6)*lens_ipow(dy, 3) + 1.35809 *x*y*lens_ipow(dx, 5)*lens_ipow(dy, 2) + -142.613 *lens_ipow(dx, 2)*lens_ipow(dy, 7)*lambda+0.0f;
const double dx44 =  + 1.31494  + -5.20687 *lambda + 7.3534 *lens_ipow(lambda, 2) + -3.60208 *lens_ipow(lambda, 3) + -0.0006847 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -1.4906e-05 *lens_ipow(x, 3)*dx + -7.15797e-06 *lens_ipow(y, 4)*lens_ipow(dx, 2) + -0.00145141 *lens_ipow(x, 2)*lens_ipow(dy, 4) + -17.8266 *lens_ipow(dx, 2)*lens_ipow(dy, 8)+0.0f;
} break;
